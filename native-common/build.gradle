buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
    }
}


plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'build/genresource']
        }
    }
}

// Merging Service Files
shadowJar {
    mergeServiceFiles()
}

dependencies {

    compile group: 'org.mule.weave', name: 'runtime', version: weaveVersion
    compile group: 'org.graalvm.sdk', name: 'graal-sdk', version: '1.0.0-rc12'
    compile group: 'org.mule.weave', name: 'core-modules', version: weaveVersion
    compile group: 'org.mule.weave', name: 'yaml-module', version: weaveVersion
    compile group: 'org.mule.weave', name: 'dependency-manager', version: weaveVersion
    compile(group: 'org.mule.weave', name: 'raml-module', version: "1.0.0-SNAPSHOT"){
        exclude group: 'org.slf4j'
        exclude group: 'org.topbraid.shacl'
    }
    compile group: 'org.mule.weave', name: 'http-module', version: "1.0.0-SNAPSHOT"
    compile group: 'org.mule.weave', name: 'http-netty-module', version: "1.0.0-SNAPSHOT"

}

def genDirectory = new File("$project.buildDir/genresource")


task genVersions() {
    println("Generating Versions File.")
    def componentVersion = new File(genDirectory, "org/mule/weave/v2/version/ComponentVersion.scala")
    def parentFile = componentVersion.getParentFile()
    if (!parentFile.exists()) {
        parentFile.mkdirs()
    }
    final PrintWriter outputPrinter = new PrintWriter(new FileWriter(componentVersion))
    def properties = new Properties()
    def gradleProperties = new File(project.projectDir, "../gradle.properties")
    println(gradleProperties)
    properties.load(new FileInputStream(gradleProperties))
    outputPrinter.println("package org.mule.weave.v2.version")
    outputPrinter.println()
    outputPrinter.println("object ComponentVersion {")
    def entrySet = properties.entrySet()
    for (Map.Entry entry : entrySet) {
        outputPrinter.println("\tvar " + entry.getKey() + " = \"" + entry.getValue() + "\"")
    }
    outputPrinter.println("}")
    outputPrinter.close()
}


defaultTasks += genVersions

compileScala {
    dependsOn genVersions
}






